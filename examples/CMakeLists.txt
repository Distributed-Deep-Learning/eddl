cmake_minimum_required(VERSION 3.9.2)

project(eddl-examples)

SET(USE_FPGA ON)

find_package(OpenCL REQUIRED)
include_directories(${OpenCL_INCLUDE_DIR})
include_directories("$ENV{XILINX_VIVADO}/include")
    #include_directories("/opt/Xilinx/Vivado/2018.3/include")
    #target_link_libraries(${PROJECT_NAME} PRIVATE ${OpenCL_LIBRARY})

set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS}")

#if(APPLE)
#    target_link_options(${PROJECT_NAME} PUBLIC -framework opencl)
#endif()

# EXAMPLES: MNIST ****************************************************
add_executable(mnist_mlp "nn/1_mnist/1_mnist_mlp.cpp")
if(USE_FPGA)
target_link_libraries(mnist_mlp PRIVATE eddl ${OpenCL_LIBRARY})
else() 
target_link_libraries(mnist_mlp eddl)
endif()

add_executable(mnist_mlp_initializers "nn/1_mnist/2_mnist_mlp_initializers.cpp")
if(USE_FPGA)
target_link_libraries(mnist_mlp_initializers PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_mlp_initializers eddl)
endif()

add_executable(mnist_mlp_regularizers "nn/1_mnist/3_mnist_mlp_regularizers.cpp")
if(USE_FPGA)
target_link_libraries(mnist_mlp_regularizers PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_mlp_regularizers eddl)
endif()

add_executable(mnist_mlp_da "nn/1_mnist/4_mnist_mlp_da.cpp")
if(USE_FPGA)
target_link_libraries(mnist_mlp_da PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_mlp_da eddl)
endif()

add_executable(mnist_mlp_train_batch "nn/1_mnist/5_mnist_mlp_train_batch.cpp")
if(USE_FPGA)
target_link_libraries(mnist_mlp_train_batch PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_mlp_train_batch eddl)
endif()

add_executable(mnist_auto_encoder "nn/1_mnist/6_mnist_auto_encoder.cpp")
if(USE_FPGA)
target_link_libraries(mnist_auto_encoder PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_auto_encoder eddl)
endif()

add_executable(mnist_conv "nn/1_mnist/7_mnist_conv.cpp")
if(USE_FPGA)
target_link_libraries(mnist_conv PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_conv eddl)
endif()

add_executable(mnist_rnn "nn/1_mnist/8_mnist_rnn.cpp")
if(USE_FPGA)
target_link_libraries(mnist_rnn PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_rnn eddl)
endif()

add_executable(mnist_mlp_func "nn/1_mnist/9_mnist_mlp_func.cpp")
if(USE_FPGA)
target_link_libraries(mnist_mlp_func PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_mlp_func eddl)
endif()

add_executable(mnist_rnn_func "nn/1_mnist/10_mnist_rnn_func.cpp")
if(USE_FPGA)
target_link_libraries(mnist_rnn_func PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_rnn_func eddl)
endif()

add_executable(mnist_conv1D "nn/1_mnist/11_mnist_conv1D.cpp")
if(USE_FPGA)
target_link_libraries(mnist_conv1D PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_conv1D eddl)
endif()

add_executable(mnist_auto_merging "nn/1_mnist/12_mnist_auto_encoder_merging.cpp")
if(USE_FPGA)
target_link_libraries(mnist_auto_merging PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_auto_merging eddl)
endif()

add_executable(mnist_conv_dice "nn/1_mnist/13_mnist_conv_dice.cpp")
if(USE_FPGA)
target_link_libraries(mnist_conv_dice PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_conv_dice eddl)
endif()

add_executable(mnist_losses "nn/1_mnist/14_mnist_losses.cpp")
if(USE_FPGA)
target_link_libraries(mnist_losses PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_losses eddl)
endif()

add_executable(mnist_siamese "nn/1_mnist/15_mnist_siamese.cpp")
if(USE_FPGA)
target_link_libraries(mnist_siamese PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(mnist_siamese eddl)
endif()

# EXAMPLES: CIFAR10 ****************************************************
add_executable(cifar_conv "nn/2_cifar10/1_cifar_conv.cpp")
if(USE_FPGA)
target_link_libraries(cifar_conv PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(cifar_conv eddl)
endif()

add_executable(cifar_conv_da "nn/2_cifar10/2_cifar_conv_da.cpp")
if(USE_FPGA)
target_link_libraries(cifar_conv_da PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(cifar_conv_da eddl)
endif()

add_executable(cifar_vgg16 "nn/2_cifar10/3_cifar_vgg16.cpp")
if(USE_FPGA)
target_link_libraries(cifar_vgg16 PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(cifar_vgg16 eddl)
endif()

add_executable(cifar_vgg16_bn "nn/2_cifar10/4_cifar_vgg16_bn.cpp")
if(USE_FPGA)
target_link_libraries(cifar_vgg16_bn PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(cifar_vgg16_bn eddl)
endif()

add_executable(cifar_vgg16_gn "nn/2_cifar10/4_cifar_vgg16_gn.cpp")
if(USE_FPGA)
target_link_libraries(cifar_vgg16_gn PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(cifar_vgg16_gn eddl)
endif()

add_executable(cifar_resnet "nn/2_cifar10/5_cifar_resnet.cpp")
if(USE_FPGA)
target_link_libraries(cifar_resnet PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(cifar_resnet eddl)
endif()

add_executable(cifar_resnet_da_bn "nn/2_cifar10/6_cifar_resnet_da_bn.cpp")
if(USE_FPGA)
target_link_libraries(cifar_resnet_da_bn PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(cifar_resnet_da_bn eddl)
endif()

add_executable(cifar_resnet50 "nn/2_cifar10/7_cifar_resnet50_da_bn.cpp")
if(USE_FPGA)
target_link_libraries(cifar_resnet50 PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(cifar_resnet50 eddl)
endif()

# EXAMPLES: Drive segmentation ****************************************************
add_executable(drive_seg "nn/3_drive/1_drive_seg.cpp")
if(USE_FPGA)
target_link_libraries(drive_seg PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(drive_seg eddl)
endif()

# EXAMPLES: NLP ****************************************************

add_executable(sentiment_rnn "nn/4_NLP/1_sentiment_rnn.cpp")
if(USE_FPGA)
target_link_libraries(sentiment_rnn PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(sentiment_rnn eddl)

add_executable(sentiment_lstm "nn/4_NLP/2_sentiment_lstm.cpp")
if(USE_FPGA)
target_link_libraries(sentiment_lstm PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(sentiment_lstm eddl)

add_executable(machine_translation "nn/4_NLP/3_machine_translation.cpp")
if(USE_FPGA)
target_link_libraries(machine_translation PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(machine_translation eddl)

add_executable(text_generation "nn/4_NLP/4_text_generation.cpp")
if(USE_FPGA)
target_link_libraries(text_generation PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(text_generation eddl)


# EXAMPLES: Tensor ****************************************************
add_executable(tensor_ops "tensor/eddl_ops.cpp")
if(USE_FPGA)
target_link_libraries(tensor_ops PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(tensor_ops eddl)
endif()

add_executable(tensor_image "tensor/eddl_image.cpp")
if(USE_FPGA)
target_link_libraries(tensor_image PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(tensor_image eddl)
endif()

add_executable(tensor_io "tensor/eddl_io.cpp")
if(USE_FPGA)
target_link_libraries(tensor_io PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(tensor_io eddl)
endif()

add_executable(tensor_tests_dev "tensor/eddl_tests_dev.cpp")
if(USE_FPGA)
target_link_libraries(tensor_tests_dev PRIVATE eddl ${OpenCL_LIBRARY})
else()
target_link_libraries(tensor_tests_dev eddl)
endif()


# EXAMPLES: ONNX ******************************************************************
if(BUILD_PROTOBUF)
    add_executable(onnx_pointer "onnx/1_onnx_pointer.cpp")
    target_link_libraries(onnx_pointer eddl)

    add_executable(onnx_export "onnx/2_onnx_save_net_to_file.cpp")
    target_link_libraries(onnx_export eddl)

    add_executable(onnx_import "onnx/3_onnx_import_net_from_file.cpp")
    target_link_libraries(onnx_import eddl)
endif()
