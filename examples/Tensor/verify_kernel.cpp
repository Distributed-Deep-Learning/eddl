#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <ctime>
#include <limits>
#include "tensor.h"

#include "apis/eddlT.h"
#include "layer_core.h"

#include "nn/tensor_nn.h"
#include "../hardware/cpu/nn/cpu_nn.h"
#include "../../src/hardware/fpga/tensor_hls_op.h"
#include "../hardware/cpu/cpu_hw.h"


using namespace std;
using namespace eddlT;



int main(int argc, char **argv) {
    int dev = DEV_FPGA;
    //int dev = DEV_CPU;


    tensor A = create({16,10}, dev);
    fill_(A,0);
    Tensor *nA=new Tensor(A->getShape(),DEV_CPU);
    fill_(nA,0);
    //cent
    nA->ptr[ 4]  = 1;
    nA->ptr[ 16]  = 1;
    nA->ptr[ 28]  = 1;
    nA->ptr[ 39]  = 1;
    nA->ptr[ 47]  = 1;
    nA->ptr[52 ]  = 1;
    nA->ptr[ 68]  = 1;
    nA->ptr[ 75]  = 1;
    nA->ptr[ 80]  = 1;
    nA->ptr[ 99]  = 1;
    nA->ptr[ 103]  = 1;
    nA->ptr[ 116]  = 1;
    nA->ptr[ 126]  = 1;
    nA->ptr[ 135]  = 1;
    nA->ptr[ 147]  = 1;
    nA->ptr[ 155]  = 1;

    //accuracy
    // nA->ptr	[	0	]	=	0.000000	;
    // nA->ptr	[	1	]	=	0.000000	;
    // nA->ptr	[	2	]	=	0.000000	;
    // nA->ptr	[	3	]	=	0.000000	;
    // nA->ptr	[	4	]	=	1.000000	;
    // nA->ptr	[	5	]	=	0.000000	;
    // nA->ptr	[	6	]	=	0.000000	;
    // nA->ptr	[	7	]	=	0.000000	;
    // nA->ptr	[	8	]	=	0.000000	;
    // nA->ptr	[	9	]	=	0.000000	;
    // nA->ptr	[	10	]	=	0.000000	;
    // nA->ptr	[	11	]	=	0.000000	;
    // nA->ptr	[	12	]	=	0.000000	;
    // nA->ptr	[	13	]	=	0.000000	;
    // nA->ptr	[	14	]	=	0.000000	;
    // nA->ptr	[	15	]	=	0.000000	;
    // nA->ptr	[	16	]	=	1.000000	;
    // nA->ptr	[	17	]	=	0.000000	;
    // nA->ptr	[	18	]	=	0.000000	;
    // nA->ptr	[	19	]	=	0.000000	;
    // nA->ptr	[	20	]	=	0.000000	;
    // nA->ptr	[	21	]	=	0.000000	;
    // nA->ptr	[	22	]	=	0.000000	;
    // nA->ptr	[	23	]	=	0.000000	;
    // nA->ptr	[	24	]	=	0.000000	;
    // nA->ptr	[	25	]	=	0.000000	;
    // nA->ptr	[	26	]	=	0.000000	;
    // nA->ptr	[	27	]	=	0.000000	;
    // nA->ptr	[	28	]	=	1.000000	;
    // nA->ptr	[	29	]	=	0.000000	;
    // nA->ptr	[	30	]	=	0.000000	;
    // nA->ptr	[	31	]	=	0.000000	;
    // nA->ptr	[	32	]	=	0.000000	;
    // nA->ptr	[	33	]	=	0.000000	;
    // nA->ptr	[	34	]	=	0.000000	;
    // nA->ptr	[	35	]	=	0.000000	;
    // nA->ptr	[	36	]	=	0.000000	;
    // nA->ptr	[	37	]	=	0.000000	;
    // nA->ptr	[	38	]	=	0.000000	;
    // nA->ptr	[	39	]	=	1.000000	;
    // nA->ptr	[	40	]	=	0.000000	;
    // nA->ptr	[	41	]	=	0.000000	;
    // nA->ptr	[	42	]	=	0.000000	;
    // nA->ptr	[	43	]	=	0.000000	;
    // nA->ptr	[	44	]	=	0.000000	;
    // nA->ptr	[	45	]	=	0.000000	;
    // nA->ptr	[	46	]	=	0.000000	;
    // nA->ptr	[	47	]	=	1.000000	;
    // nA->ptr	[	48	]	=	0.000000	;
    // nA->ptr	[	49	]	=	0.000000	;
    // nA->ptr	[	50	]	=	0.000000	;
    // nA->ptr	[	51	]	=	0.000000	;
    // nA->ptr	[	52	]	=	1.000000	;
    // nA->ptr	[	53	]	=	0.000000	;
    // nA->ptr	[	54	]	=	0.000000	;
    // nA->ptr	[	55	]	=	0.000000	;
    // nA->ptr	[	56	]	=	0.000000	;
    // nA->ptr	[	57	]	=	0.000000	;
    // nA->ptr	[	58	]	=	0.000000	;
    // nA->ptr	[	59	]	=	0.000000	;
    // nA->ptr	[	60	]	=	0.000000	;
    // nA->ptr	[	61	]	=	0.000000	;
    // nA->ptr	[	62	]	=	0.000000	;
    // nA->ptr	[	63	]	=	0.000000	;
    // nA->ptr	[	64	]	=	0.000000	;
    // nA->ptr	[	65	]	=	0.000000	;
    // nA->ptr	[	66	]	=	0.000000	;
    // nA->ptr	[	67	]	=	0.000000	;
    // nA->ptr	[	68	]	=	1.000000	;
    // nA->ptr	[	69	]	=	0.000000	;
    // nA->ptr	[	70	]	=	0.000000	;
    // nA->ptr	[	71	]	=	0.000000	;
    // nA->ptr	[	72	]	=	0.000000	;
    // nA->ptr	[	73	]	=	0.000000	;
    // nA->ptr	[	74	]	=	0.000000	;
    // nA->ptr	[	75	]	=	1.000000	;
    // nA->ptr	[	76	]	=	0.000000	;
    // nA->ptr	[	77	]	=	0.000000	;
    // nA->ptr	[	78	]	=	0.000000	;
    // nA->ptr	[	79	]	=	0.000000	;
    // nA->ptr	[	80	]	=	1.000000	;
    // nA->ptr	[	81	]	=	0.000000	;
    // nA->ptr	[	82	]	=	0.000000	;
    // nA->ptr	[	83	]	=	0.000000	;
    // nA->ptr	[	84	]	=	0.000000	;
    // nA->ptr	[	85	]	=	0.000000	;
    // nA->ptr	[	86	]	=	0.000000	;
    // nA->ptr	[	87	]	=	0.000000	;
    // nA->ptr	[	88	]	=	0.000000	;
    // nA->ptr	[	89	]	=	0.000000	;
    // nA->ptr	[	90	]	=	0.000000	;
    // nA->ptr	[	91	]	=	0.000000	;
    // nA->ptr	[	92	]	=	0.000000	;
    // nA->ptr	[	93	]	=	0.000000	;
    // nA->ptr	[	94	]	=	0.000000	;
    // nA->ptr	[	95	]	=	0.000000	;
    // nA->ptr	[	96	]	=	0.000000	;
    // nA->ptr	[	97	]	=	0.000000	;
    // nA->ptr	[	98	]	=	0.000000	;
    // nA->ptr	[	99	]	=	1.000000	;
    // nA->ptr	[	100	]	=	0.000000	;
    // nA->ptr	[	101	]	=	0.000000	;
    // nA->ptr	[	102	]	=	0.000000	;
    // nA->ptr	[	103	]	=	1.000000	;
    // nA->ptr	[	104	]	=	0.000000	;
    // nA->ptr	[	105	]	=	0.000000	;
    // nA->ptr	[	106	]	=	0.000000	;
    // nA->ptr	[	107	]	=	0.000000	;
    // nA->ptr	[	108	]	=	0.000000	;
    // nA->ptr	[	109	]	=	0.000000	;
    // nA->ptr	[	110	]	=	0.000000	;
    // nA->ptr	[	111	]	=	0.000000	;
    // nA->ptr	[	112	]	=	0.000000	;
    // nA->ptr	[	113	]	=	0.000000	;
    // nA->ptr	[	114	]	=	0.000000	;
    // nA->ptr	[	115	]	=	0.000000	;
    // nA->ptr	[	116	]	=	1.000000	;
    // nA->ptr	[	117	]	=	0.000000	;
    // nA->ptr	[	118	]	=	0.000000	;
    // nA->ptr	[	119	]	=	0.000000	;
    // nA->ptr	[	120	]	=	0.000000	;
    // nA->ptr	[	121	]	=	0.000000	;
    // nA->ptr	[	122	]	=	0.000000	;
    // nA->ptr	[	123	]	=	0.000000	;
    // nA->ptr	[	124	]	=	0.000000	;
    // nA->ptr	[	125	]	=	0.000000	;
    // nA->ptr	[	126	]	=	1.000000	;
    // nA->ptr	[	127	]	=	0.000000	;
    // nA->ptr	[	128	]	=	0.000000	;
    // nA->ptr	[	129	]	=	0.000000	;
    // nA->ptr	[	130	]	=	0.000000	;
    // nA->ptr	[	131	]	=	0.000000	;
    // nA->ptr	[	132	]	=	0.000000	;
    // nA->ptr	[	133	]	=	0.000000	;
    // nA->ptr	[	134	]	=	0.000000	;
    // nA->ptr	[	135	]	=	1.000000	;
    // nA->ptr	[	136	]	=	0.000000	;
    // nA->ptr	[	137	]	=	0.000000	;
    // nA->ptr	[	138	]	=	0.000000	;
    // nA->ptr	[	139	]	=	0.000000	;
    // nA->ptr	[	140	]	=	0.000000	;
    // nA->ptr	[	141	]	=	0.000000	;
    // nA->ptr	[	142	]	=	0.000000	;
    // nA->ptr	[	143	]	=	0.000000	;
    // nA->ptr	[	144	]	=	0.000000	;
    // nA->ptr	[	145	]	=	0.000000	;
    // nA->ptr	[	146	]	=	0.000000	;
    // nA->ptr	[	147	]	=	1.000000	;
    // nA->ptr	[	148	]	=	0.000000	;
    // nA->ptr	[	149	]	=	0.000000	;
    // nA->ptr	[	150	]	=	0.000000	;
    // nA->ptr	[	151	]	=	0.000000	;
    // nA->ptr	[	152	]	=	0.000000	;
    // nA->ptr	[	153	]	=	0.000000	;
    // nA->ptr	[	154	]	=	0.000000	;
    // nA->ptr	[	155	]	=	1.000000	;
    // nA->ptr	[	156	]	=	0.000000	;
    // nA->ptr	[	157	]	=	0.000000	;
    // nA->ptr	[	158	]	=	0.000000	;
    // nA->ptr	[	159	]	=	0.000000	;

    fpga_copy_to_fpga(nA->ptr, A);

    tensor B = create({16,10}, dev);
    fill_(B,0);

    Tensor *nB=new Tensor(B->getShape(),DEV_CPU);
    fill_(nB,0);
    //cent
    nB->ptr[0]  = 0.125059;
    nB->ptr[1]  =	0.098679;
    nB->ptr[2]  =	0.091125;
    nB->ptr[ 3]  =	0.090827;
    nB->ptr[ 4]  =	0.113453;
    nB->ptr[ 5]  =	0.092868;
    nB->ptr[ 6]  =	0.100833;
    nB->ptr[ 7]  =	0.093500;
    nB->ptr[ 8]  =	0.096603;
    nB->ptr[ 9]  =	0.097054;
    nB->ptr[ 10]  =	0.123201;
    nB->ptr[ 11]  =	0.100531;
    nB->ptr[ 12]  =	0.090601;
    nB->ptr[ 13]  =	0.095566;
    nB->ptr[ 14]  =	0.113764;
    nB->ptr[ 15]  =	0.092661;
    nB->ptr[ 16]  =	0.098669;
    nB->ptr[ 17]  =	0.093760;
    nB->ptr[ 18]  =	0.097659;
    nB->ptr[ 19]  =	0.093587;
    nB->ptr[ 20]  =	0.124377;
    nB->ptr[ 21]  =	0.096818;
    nB->ptr[ 22]  =	0.094711;
    nB->ptr[ 23]  =	0.095925;
    nB->ptr[ 24]  =	0.112061;
    nB->ptr[ 25]  =	0.097647;
    nB->ptr[ 26]  =	0.094142;
    nB->ptr[ 27]  =	0.091833;
    nB->ptr[ 28]  =	0.094780;
    nB->ptr[ 29]  =	0.097707;
    nB->ptr[ 30]  =	0.124695;
    nB->ptr[ 31]  =	0.100746;
    nB->ptr[ 32]  =	0.092571;
    nB->ptr[ 33]  =	0.093846;
    nB->ptr[ 34]  =	0.109972;
    nB->ptr[35]  =	0.095269;
    nB->ptr[ 36]  =	0.102317;
    nB->ptr[ 37]  =	0.091629;
    nB->ptr[ 38]  =	0.094280;
    nB->ptr[ 39]  =	0.094675;
    nB->ptr[ 40]  =	0.119235;
    nB->ptr[ 41]  =	0.098022;
    nB->ptr[ 42]  =	0.090732;
    nB->ptr[ 43]  =	0.092911;
    nB->ptr[ 44]  =	0.117833;
    nB->ptr[ 45]  =	0.097168;
    nB->ptr[ 46]  =	0.100538;
    nB->ptr[ 47]  =	0.094015;
    nB->ptr[ 48]  =	0.094447;
    nB->ptr[ 49]  =	0.095098;
    nB->ptr[ 50]  =	0.126807;
    nB->ptr[ 51]  =	0.096639;
    nB->ptr[ 52]  =	0.095367;
    nB->ptr[ 53]  =	0.093216;
    nB->ptr[ 54]  =	0.112408;
    nB->ptr[ 55]  =	0.096409;
    nB->ptr[ 56]  =	0.101875;
    nB->ptr[ 57]  =	0.092263;
    nB->ptr[ 58]  =	0.093422;
    nB->ptr[ 59]  =	0.091594;
    nB->ptr[ 60]  =	0.123406;
    nB->ptr[ 61]  =	0.098852;
    nB->ptr[ 62]  =	0.090830;
    nB->ptr[ 63]  =	0.094934;
    nB->ptr[ 64]  =	0.113753;
    nB->ptr[ 65]  =	0.092622;
    nB->ptr[ 66]  =	0.097122;
    nB->ptr[ 67]  =	0.089364;
    nB->ptr[ 68]  =	0.101171;
    nB->ptr[ 69]  =	0.097946;
    nB->ptr[ 70]  =	0.126542;
    nB->ptr[ 71]  =	0.095692;
    nB->ptr[ 72]  =	0.091142;
    nB->ptr[ 73]  =	0.092789;
    nB->ptr[ 74]  =	0.110523;
    nB->ptr[ 75]  =	0.096960;
    nB->ptr[ 76]  =	0.101463;
    nB->ptr[ 77]  =	0.091629;
    nB->ptr[ 78]  =	0.094733;
    nB->ptr[ 79]  =	0.098528;
    nB->ptr[ 80]  =	0.120718;
    nB->ptr[ 81]  =	0.094573;
    nB->ptr[ 82]  =	0.086686;
    nB->ptr[ 83]  =	0.092827;
    nB->ptr[ 84]  =	0.114803;
    nB->ptr[ 85]  =	0.093733;
    nB->ptr[ 86]  =	0.103736;
    nB->ptr[ 87]  =	0.094839;
    nB->ptr[ 88]  =	0.099106;
    nB->ptr[ 89]  =	0.098979;
    nB->ptr[ 90]  =	0.119284;
    nB->ptr[ 91]  =	0.099636;
    nB->ptr[ 92]  =	0.091070;
    nB->ptr[ 93]  =	0.092933;
    nB->ptr[ 94]  =	0.113688;
    nB->ptr[ 95]  =	0.095288;
    nB->ptr[ 96]  =	0.103912;
    nB->ptr[ 97]  =	0.092282;
    nB->ptr[ 98]  =	0.093749;
    nB->ptr[ 99]  =	0.098158;
    nB->ptr[ 100]  =	0.124876;
    nB->ptr[ 101]  =	0.095228;
    nB->ptr[ 102]  =	0.090869;
    nB->ptr[ 103]  =	0.091423;
    nB->ptr[ 104]  =	0.115300;
    nB->ptr[ 105]  =	0.097962;
    nB->ptr[ 106]  =	0.101320;
    nB->ptr[ 107]  =	0.092924;
    nB->ptr[ 108]  =	0.096093;
    nB->ptr[ 109]  =	0.094005;
    nB->ptr[ 110]  =	0.119699;
    nB->ptr[ 111]  =	0.098241;
    nB->ptr[ 112]  =	0.092342;
    nB->ptr[ 113]  =	0.094005;
    nB->ptr[ 114]  =	0.119224;
    nB->ptr[ 115]  =	0.099846;
    nB->ptr[ 116]  =	0.100576;
    nB->ptr[ 117]  =	0.089332;
    nB->ptr[ 118]  =	0.095915;
    nB->ptr[ 119]  =	0.090820;
    nB->ptr[ 120]  =	0.121645;
    nB->ptr[ 121]  =	0.096902;
    nB->ptr[ 122]  =	0.092585;
    nB->ptr[ 123]  =	0.092652;
    nB->ptr[ 124]  =	0.110613;
    nB->ptr[ 125]  =	0.092693;
    nB->ptr[ 126]  =	0.104667;
    nB->ptr[ 127]  =	0.091156;
    nB->ptr[ 128]  =	0.100048;
    nB->ptr[ 129]  =	0.097040;
    nB->ptr[ 130]  =	0.124861;
    nB->ptr[ 131]  =	0.095783;
    nB->ptr[ 132]  =	0.088439;
    nB->ptr[ 133]  =	0.092765;
    nB->ptr[ 134]  =	0.117009;
    nB->ptr[ 135]  =	0.099135;
    nB->ptr[ 136]  =	0.095830;
    nB->ptr[ 137]  =	0.096222;
    nB->ptr[ 138]  =	0.098102;
    nB->ptr[ 139]  =	0.091852;
    nB->ptr[ 140]  =	0.125172;
    nB->ptr[ 141]  =	0.097587;
    nB->ptr[ 142]  =	0.093499;
    nB->ptr[ 143]  =	0.094706;
    nB->ptr[ 144]  =	0.112630;
    nB->ptr[ 145]  =	0.095453;
    nB->ptr[ 146]  =	0.100291;
    nB->ptr[ 147]  =	0.092535;
    nB->ptr[ 148]  =	0.094777;
    nB->ptr[ 149]  =	0.093349;
    nB->ptr[ 150]  =	0.123752;
    nB->ptr[ 151]  =	0.096569;
    nB->ptr[ 152]  =	0.089051;
    nB->ptr[ 153]  =	0.092250;
    nB->ptr[ 154]  =	0.108276;
    nB->ptr[ 155]  =	0.096210;
    nB->ptr[ 156]  =	0.100622;
    nB->ptr[ 157]  =	0.095525;
    nB->ptr[ 158]  =	0.099229;
    nB->ptr[ 159]  =	0.098516;

    //accuracy
    // nB->ptr	[	0	]	=	0.107806	;
    // nB->ptr	[	1	]	=	0.092676	;
    // nB->ptr	[	2	]	=	0.090411	;
    // nB->ptr	[	3	]	=	0.108623	;
    // nB->ptr	[	4	]	=	0.093385	;
    // nB->ptr	[	5	]	=	0.105475	;
    // nB->ptr	[	6	]	=	0.083303	;
    // nB->ptr	[	7	]	=	0.118926	;
    // nB->ptr	[	8	]	=	0.087874	;
    // nB->ptr	[	9	]	=	0.111520	;
    // nB->ptr	[	10	]	=	0.112111	;
    // nB->ptr	[	11	]	=	0.091845	;
    // nB->ptr	[	12	]	=	0.090490	;
    // nB->ptr	[	13	]	=	0.107419	;
    // nB->ptr	[	14	]	=	0.092925	;
    // nB->ptr	[	15	]	=	0.104943	;
    // nB->ptr	[	16	]	=	0.089801	;
    // nB->ptr	[	17	]	=	0.117876	;
    // nB->ptr	[	18	]	=	0.085917	;
    // nB->ptr	[	19	]	=	0.106673	;
    // nB->ptr	[	20	]	=	0.101478	;
    // nB->ptr	[	21	]	=	0.094850	;
    // nB->ptr	[	22	]	=	0.089247	;
    // nB->ptr	[	23	]	=	0.102405	;
    // nB->ptr	[	24	]	=	0.092347	;
    // nB->ptr	[	25	]	=	0.105276	;
    // nB->ptr	[	26	]	=	0.091546	;
    // nB->ptr	[	27	]	=	0.120153	;
    // nB->ptr	[	28	]	=	0.087835	;
    // nB->ptr	[	29	]	=	0.114863	;
    // nB->ptr	[	30	]	=	0.104864	;
    // nB->ptr	[	31	]	=	0.089196	;
    // nB->ptr	[	32	]	=	0.090611	;
    // nB->ptr	[	33	]	=	0.111909	;
    // nB->ptr	[	34	]	=	0.092117	;
    // nB->ptr	[	35	]	=	0.103688	;
    // nB->ptr	[	36	]	=	0.089207	;
    // nB->ptr	[	37	]	=	0.119740	;
    // nB->ptr	[	38	]	=	0.086872	;
    // nB->ptr	[	39	]	=	0.111796	;
    // nB->ptr	[	40	]	=	0.109552	;
    // nB->ptr	[	41	]	=	0.090344	;
    // nB->ptr	[	42	]	=	0.090379	;
    // nB->ptr	[	43	]	=	0.108289	;
    // nB->ptr	[	44	]	=	0.091954	;
    // nB->ptr	[	45	]	=	0.105268	;
    // nB->ptr	[	46	]	=	0.088001	;
    // nB->ptr	[	47	]	=	0.114840	;
    // nB->ptr	[	48	]	=	0.090687	;
    // nB->ptr	[	49	]	=	0.110687	;
    // nB->ptr	[	50	]	=	0.107344	;
    // nB->ptr	[	51	]	=	0.090989	;
    // nB->ptr	[	52	]	=	0.092044	;
    // nB->ptr	[	53	]	=	0.105842	;
    // nB->ptr	[	54	]	=	0.086885	;
    // nB->ptr	[	55	]	=	0.108421	;
    // nB->ptr	[	56	]	=	0.091900	;
    // nB->ptr	[	57	]	=	0.113682	;
    // nB->ptr	[	58	]	=	0.089955	;
    // nB->ptr	[	59	]	=	0.112937	;
    // nB->ptr	[	60	]	=	0.107202	;
    // nB->ptr	[	61	]	=	0.090460	;
    // nB->ptr	[	62	]	=	0.093580	;
    // nB->ptr	[	63	]	=	0.106543	;
    // nB->ptr	[	64	]	=	0.089811	;
    // nB->ptr	[	65	]	=	0.107229	;
    // nB->ptr	[	66	]	=	0.087971	;
    // nB->ptr	[	67	]	=	0.115338	;
    // nB->ptr	[	68	]	=	0.088020	;
    // nB->ptr	[	69	]	=	0.113846	;
    // nB->ptr	[	70	]	=	0.112307	;
    // nB->ptr	[	71	]	=	0.092327	;
    // nB->ptr	[	72	]	=	0.087636	;
    // nB->ptr	[	73	]	=	0.111814	;
    // nB->ptr	[	74	]	=	0.091632	;
    // nB->ptr	[	75	]	=	0.105314	;
    // nB->ptr	[	76	]	=	0.087459	;
    // nB->ptr	[	77	]	=	0.115063	;
    // nB->ptr	[	78	]	=	0.085932	;
    // nB->ptr	[	79	]	=	0.110516	;
    // nB->ptr	[	80	]	=	0.107577	;
    // nB->ptr	[	81	]	=	0.092273	;
    // nB->ptr	[	82	]	=	0.087648	;
    // nB->ptr	[	83	]	=	0.112164	;
    // nB->ptr	[	84	]	=	0.091171	;
    // nB->ptr	[	85	]	=	0.102605	;
    // nB->ptr	[	86	]	=	0.090601	;
    // nB->ptr	[	87	]	=	0.116885	;
    // nB->ptr	[	88	]	=	0.086259	;
    // nB->ptr	[	89	]	=	0.112817	;
    // nB->ptr	[	90	]	=	0.105398	;
    // nB->ptr	[	91	]	=	0.090921	;
    // nB->ptr	[	92	]	=	0.090437	;
    // nB->ptr	[	93	]	=	0.108445	;
    // nB->ptr	[	94	]	=	0.091883	;
    // nB->ptr	[	95	]	=	0.105200	;
    // nB->ptr	[	96	]	=	0.087901	;
    // nB->ptr	[	97	]	=	0.116389	;
    // nB->ptr	[	98	]	=	0.091433	;
    // nB->ptr	[	99	]	=	0.111993	;
    // nB->ptr	[	100	]	=	0.109491	;
    // nB->ptr	[	101	]	=	0.093415	;
    // nB->ptr	[	102	]	=	0.085004	;
    // nB->ptr	[	103	]	=	0.108173	;
    // nB->ptr	[	104	]	=	0.089669	;
    // nB->ptr	[	105	]	=	0.103361	;
    // nB->ptr	[	106	]	=	0.091455	;
    // nB->ptr	[	107	]	=	0.117121	;
    // nB->ptr	[	108	]	=	0.092912	;
    // nB->ptr	[	109	]	=	0.109399	;
    // nB->ptr	[	110	]	=	0.107795	;
    // nB->ptr	[	111	]	=	0.089517	;
    // nB->ptr	[	112	]	=	0.090920	;
    // nB->ptr	[	113	]	=	0.106443	;
    // nB->ptr	[	114	]	=	0.091627	;
    // nB->ptr	[	115	]	=	0.103947	;
    // nB->ptr	[	116	]	=	0.089515	;
    // nB->ptr	[	117	]	=	0.117223	;
    // nB->ptr	[	118	]	=	0.091371	;
    // nB->ptr	[	119	]	=	0.111644	;
    // nB->ptr	[	120	]	=	0.107789	;
    // nB->ptr	[	121	]	=	0.091143	;
    // nB->ptr	[	122	]	=	0.090688	;
    // nB->ptr	[	123	]	=	0.106514	;
    // nB->ptr	[	124	]	=	0.091297	;
    // nB->ptr	[	125	]	=	0.103121	;
    // nB->ptr	[	126	]	=	0.092418	;
    // nB->ptr	[	127	]	=	0.115448	;
    // nB->ptr	[	128	]	=	0.092337	;
    // nB->ptr	[	129	]	=	0.109245	;
    // nB->ptr	[	130	]	=	0.105749	;
    // nB->ptr	[	131	]	=	0.089510	;
    // nB->ptr	[	132	]	=	0.085661	;
    // nB->ptr	[	133	]	=	0.103268	;
    // nB->ptr	[	134	]	=	0.089699	;
    // nB->ptr	[	135	]	=	0.109157	;
    // nB->ptr	[	136	]	=	0.088805	;
    // nB->ptr	[	137	]	=	0.122220	;
    // nB->ptr	[	138	]	=	0.088653	;
    // nB->ptr	[	139	]	=	0.117277	;
    // nB->ptr	[	140	]	=	0.107531	;
    // nB->ptr	[	141	]	=	0.090434	;
    // nB->ptr	[	142	]	=	0.090360	;
    // nB->ptr	[	143	]	=	0.107972	;
    // nB->ptr	[	144	]	=	0.092324	;
    // nB->ptr	[	145	]	=	0.104211	;
    // nB->ptr	[	146	]	=	0.091026	;
    // nB->ptr	[	147	]	=	0.114155	;
    // nB->ptr	[	148	]	=	0.089475	;
    // nB->ptr	[	149	]	=	0.112510	;
    // nB->ptr	[	150	]	=	0.103762	;
    // nB->ptr	[	151	]	=	0.089392	;
    // nB->ptr	[	152	]	=	0.091297	;
    // nB->ptr	[	153	]	=	0.109324	;
    // nB->ptr	[	154	]	=	0.089792	;
    // nB->ptr	[	155	]	=	0.105371	;
    // nB->ptr	[	156	]	=	0.088703	;
    // nB->ptr	[	157	]	=	0.120813	;
    // nB->ptr	[	158	]	=	0.087352	;
    // nB->ptr	[	159	]	=	0.114194	;


    fpga_copy_to_fpga(nB->ptr, B);

    tensor C = create({16,10}, dev);
    fill_(C,0);

    // int acc = 0;
    // acc=accuracy(A, B);
    // printf("ACC = %d \n",acc);
    cent(A,B,C);
    printf("C \n");
    print(C);
    printf("TEST PASSED \n");







    //clock_t t_ini, t_fin;
    //double secs;
    //int A_row = 64;
    //int A_col = 64;

    // tensor A=create({A_row,A_col}, dev);
    // fill_(A,1);

    //tensor B=create({A_col,A_row}, dev);
    //fill_(B, 2);

    //printf("A \n");
    //print(A);
    //printf("B \n");
    //print(B);

    //tensor C=create({A_row,A_row}, dev);
    ////fill_(C, 0);
    //int tA = 0;
    //int tB = 0;
    //int incC = 0;

    //ProfilerStorage whole_storage("whole_storage");
    //ProfilerStorage inner_storage("inner_storage");
    ////t_ini = clock();
    //const int times = 1;
    //{
	    //BlockProfiler prof_(whole_storage);
	    //for (int i = 0; i < times; ++i) {
		    //BlockProfiler prof_(inner_storage);
		    //Tensor::mult2D(A,tA,B,tB,C,incC);
	    //}
    //}
    ////t_fin = clock();



    //printf("C \n");
    ////print(C);

    //printf("TEST PASSED\n");
    ////double clocks = t_fin - t_ini;
    ////secs = clocks / CLOCKS_PER_SEC;
    ////printf("Tiempo de ejecución funcion Mult2D: %.16g milisegundos\n", secs * 1000.0);
    //printf("%.16g milisegundos / call\n", (secs * 1000.0) / times);

    //mult2d_ps.dump();
    //whole_storage.dump();
    //inner_storage.dump();


}
